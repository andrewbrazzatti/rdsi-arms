## Prepare Java objects using refactoring to read config from a json file
##Get Fascinator Home Path
#set($fascinatorHomePathMethod = $velocityContext.getClass().forName("com.googlecode.fascinator.common.FascinatorHome").getMethod("getPath"))
#set($fascinatorHome = $fascinatorHomePathMethod.invoke(null))

##Get Class types for relevant constructors
#set($fileClass = $velocityContext.getClass().forName("java.io.File"))
#set($stringClass = $velocityContext.getClass().forName("java.lang.String"))
#set($jsonSimpleClass = $velocityContext.getClass().forName("com.googlecode.fascinator.common.JsonSimple"))

##get Constructors to invoke
#set($fileClassConstructor = $fileClass.getConstructor($stringClass))
#set($jsonSimpleClassConstructor = $jsonSimpleClass.getConstructor($fileClass))

##invoke File constructor to create File Object for json file
#set($jsonFilePath = "${fascinatorHome}/form-configuration/arms-workflow-actions.json")
#set($fileObject = $fileClassConstructor.newInstance($jsonFilePath))

##invoke JsonSimple constructor to create object
#set($stage = $velocityContext.get('formData').get('currentStep'))
#set($actions = $jsonSimpleClassConstructor.newInstance($fileObject).getJsonObject().get("$stage").get("actions"))

### End of preparation
<div class="workflow-controls">
    <div style="float:left;margin-left:16.5em;">
        <button id="save-close" class="ui-widget">Save and close</button>
        <script type="text/javascript">
          $('#save-close').click( function () { 
              closeUrl="$portalPath/detail/$oid"; 
              action= "save";
              skipValidation = false;
              jaffa.form.save();
          });
        </script>
    </div>
    <div style="float:left;margin-left:10em;">
        <button class="ui-widget" transition-name="Back" onclick="transition_click(this)" form-action="save">Back</button>
        <button class="ui-widget" transition-name="Next" onclick="transition_click(this)" form-action="save">Next</button>
    </div>
     <div style="float:left;margin-left:10em;">
         #foreach($action in $actions)
         <div>
            #set($roleMatched = 1)
            #if ($action.get('role'))
               #set($requiredRole = $action.get('role'))
               #if (!$roles.contains("$requiredRole"))
                   #set($roleMatched = 0)
               #end
            #end

            #if($action.get('action'))
             #if ($roleMatched == 1)
                <button id="$action.get('id')" value="$action.get('action')" 
                #if ($action.get('condition-on')) 
                    #set($condition = $action.get('condition-on'))
                    class="ui-widget conditional" conditional_id="$condition.get('id')" conditional_on="$condition.get('on')"
                #else
                    class="ui-widget" 
                #end 
                >$action.get('label')</button>
                <script type="text/javascript">
                $('[id="$action.get('id')"]').click( function () { 
                    closeUrl="$portalPath/detail/$oid"; 
                    action= $(this).val();
                    if(validateSubmit()) {  jaffa.form.save(true);  }
                });
                </script>
              #end  
             #else
                <button id="$action.get('id')" class="ui-widget">$action.get('label')</button>
                <script type="text/javascript">
                $('[id="$action.get('id')"]').click( function () { 
                     delete_record("$oid");
                });
                </script>
            #end
         </div>
         #end
     </div>
</div>

<script>
### Show/Hide associated buttons of a radio button
function toggleLinkedBtns(radio_btn_name) {
    var rButtons = document.getElementsByName(radio_btn_name);
    var i, j, l = rButtons.length, m;
    for (i = 0; i < l; i++) {
        var btn_ids = rButtons[i].getAttribute('on_ids').split(',');
        m = btn_ids.length;
        if (rButtons[i].checked) {
            for(j = 0; j < m; j++) {
                $("[id='"+btn_ids[j]+"']").show();
            }
        } else {
            for(j = 0; j < m; j++) {
                $("[id='"+btn_ids[j]+"']").hide();
            }
        }
    }
}

function link2Radios(btn) {
    var conditional_id = btn.attr('conditional_id'), btn_id = btn.attr('id');
    var rbtn = $("[id='"+conditional_id+"']");
    rbtn.change(function() {
        toggleLinkedBtns(this.name);
    });
    var s = rbtn.attr('on_ids');
    if (!s) { s = btn_id } else { s += "," + btn_id } 
    rbtn.attr('on_ids',s);
    if (rbtn.attr('checked')) {
        btn.show();
    } else {
        btn.hide();
    }
}
### checkbox has ids in a format of btn_name + '.' + order_number
function link2Checkbox(btn) {
    var btn_name = btn.attr('conditional_id'), btn_id = btn.attr('id');
    function toggleSubmitButton() {
        if(allChecked(btn_name)) {
            $("[id='"+btn_id+"']").show();
        } else {
            $("[id='"+btn_id+"']").hide();
        }
    }
    toggleSubmitButton();
    $("[id^='"+btn_name+"']").change(function() {
        toggleSubmitButton();	
    });
}
        
$(document).ready(function() {
	jQuery(".conditional").each(function() {
        var btn = $( this );
        if (btn.attr('conditional_on') == 'radio') {
            link2Radios(btn);
        } else if (btn.attr('conditional_on') == 'checkbox') {
            link2Checkbox(btn);
        }
	});
#if ($roles.contains("reviewer"))
	### Link decision to applicaiton ID input box
    var rbns = $("input[name='outcome-decision']");
    rbns.change(function() {
    	var rid = $( this ).filter("input:checked").attr('id'), disabled = true;
        if (rid == "outcome-decision.2" || rid == "outcome-decision.3") {
            disabled = false; 
        }
        $("input[id='outcome-allocation-id']").attr("disabled", disabled);
    }); 
#end
});

</script>

##<p>This comes from a template</p>
###set($keys = $velocityContext.getKeys())
###foreach($key in $keys)
##    $key
###end
##<h1>Users roles</h1>
##$page.authentication.get_roles()
##<p>Seems we can use page to get them</p>
##<h1>workflow stage</h1>
##$velocityContext.get('formData').get('currentStep')
##<p>Seems we can use formData to retrieve current stage and oid = $oid</p>
######################################################################################################################################################
####Get Fascinator Home Path
###set($fascinatorHomePathMethod = $velocityContext.getClass().forName("com.googlecode.fascinator.common.FascinatorHome").getMethod("getPath"))
###set($fascinatorHome = $fascinatorHomePathMethod.invoke(null))
####Get Class types for relevant constructors
###set($fileClass = $velocityContext.getClass().forName("java.io.File"))
###set($stringClass = $velocityContext.getClass().forName("java.lang.String"))
###set($jsonSimpleClass = $velocityContext.getClass().forName("com.googlecode.fascinator.common.JsonSimple"))
####get Constructors to invoke
###set($fileClassConstructor = $fileClass.getConstructor($stringClass))
###set($jsonSimpleClassConstructor = $jsonSimpleClass.getConstructor($fileClass))
####invoke File constructor to create File Object for json file
###set($jsonFilePath = "${fascinatorHome}/form-configuration/arms-actions.json")
###set($fileObject = $fileClassConstructor.newInstance($jsonFilePath))
####invoke JsonSimple constructor to create object
##$jsonSimpleClassConstructor.newInstance($fileObject)
#########################################################################################################################################################
