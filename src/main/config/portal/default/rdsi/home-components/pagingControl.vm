## Set up a pagination control with a given ID when there is a need: there are results to be shown
## When there are more than one set of results, this is loaded by default no matter the number of results

## Reference search-paging.vm from fascinator
##
## $pagingCtrlID : the CSS ID for control's div
##
#macro(setPagingCtrl $pagingCtrlID)
    #set($paging = $self.paging)
	#if($paging.pages.size() > 1)
<div id="$pagingCtrlID" class="paging">
  <ul class="pagination">
    #foreach($pageNum in $paging.pages)
      #if($pageNum.selected)
        <li class="active"><a rel="$pageNum.value"  href="#">$pageNum.value</a></li>
      #else
        <li><a class="select-page" rel="$pageNum.value" href="#">$pageNum.value</a></li>
      #end
    #end
  </ul>
</div>
	#end
#end

<script>
function setupPagingCtrls(ctrlID, modelInst, initData) {
    $("#"+ ctrlID +" a").click(function() {
        $("#"+ ctrlID +" li.active").removeClass("active");
        $(this).parent().addClass("active");
        var pN = $(this).attr("rel");
        modelInst.reloadRecords(pN);
        return false;
    });
    if (initData) {    modelInst.prepareData(initData); }
}

## $packageType is set in "home-components/package-type.vm" which is loaded in every request list vm in this directory
// Model used by knock-out binding
function DataRowsModel(searchType, preparer) {
    var self = this
    self.rows = ko.observableArray([]);
    //As models are different, here self.prepareData is just a place holder 
    //It should be passed in as the argument of preparer or directly defined after a model instance is created in a vm
    self.prepareData = preparer ? preparer : null;
    self.reloadRecords = function(pageN) {
        self.rows.removeAll();
        if (pageN == null) { pageN = 1; }
        jQuery.getJSON('$portalPath/dashboards/records.script?packageType=$packageType&searchType='+searchType+'&pageNum='+pageN, function(data) {
         if (self.prepareData) {
             self.prepareData(data); 
         } else {
             alert("Bad implementation: Currrent modal does not have function prepareData defined.");
         }
        });
    };
}

function zeroFill( number, width )
{
  width -= number.toString().length;
  if ( width > 0 )
  {
    return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
  }
  return number + ""; // always return a string
}

// Convert a full UTC date into format of dd/mm/yyyy
function formatDate(od) {
    var d = new Date(od);
    var newD = zeroFill(d.getUTCDate(),2) + '/' + zeroFill(parseInt(d.getUTCMonth())+1,2) + '/' + d.getUTCFullYear();
    return newD;
}

</script>
